function [methodinfo,structs,enuminfo,ThunkLibName]=newfocustlb67000
%NEWFOCUSTLB67000 Create structures to define interfaces found in 'NewpDll'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Fri Apr  4 15:21:58 2014
%perl options:'NewpDll.i -outfile=newfocustlb67000.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern DeviceStateChanged g_lpDeviceStateChangedCB ; 
% fcns.name{fcnNum}='g_lpDeviceStateChangedCB'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_init_system ( void ); 
fcns.name{fcnNum}='newp_usb_init_system'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_init_product ( int nProductID ); 
fcns.name{fcnNum}='newp_usb_init_product'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_open_devices ( int nProductID , bool bUseUSBAddress , int * nNumDevices ); 
fcns.name{fcnNum}='newp_usb_open_devices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'int32', 'bool', 'int32Ptr'};fcnNum=fcnNum+1;
% void EXTERN_C _stdcall newp_usb_uninit_system ( void ); 
fcns.name{fcnNum}='newp_usb_uninit_system'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_event_init ( int nProductID , DeviceStateChanged lpDeviceStateChangedCB ); 
% fcns.name{fcnNum}='newp_usb_event_init'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'int32', 'FcnPtr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_event_assign_key ( char * DeviceKey , int handle ); 
fcns.name{fcnNum}='newp_usb_event_assign_key'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_event_remove_key ( char * DeviceKey ); 
fcns.name{fcnNum}='newp_usb_event_remove_key'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_event_get_attached_devices ( char ** ppDeviceKeys , int * pDeviceHandles ); 
fcns.name{fcnNum}='newp_usb_event_get_attached_devices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_event_get_key_from_handle ( int handle , char * DeviceKey ); 
fcns.name{fcnNum}='newp_usb_event_get_key_from_handle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_get_device_info ( char * Buffer ); 
fcns.name{fcnNum}='newp_usb_get_device_info'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_get_model_serial_keys ( char ** ppBuffer ); 
fcns.name{fcnNum}='newp_usb_get_model_serial_keys'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall GetInstrumentList ( int * arInstruments , int * arInstrumentsModel , int * arInstrumentsSN , int * nArraySize ); 
fcns.name{fcnNum}='GetInstrumentList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_read_by_key ( char * DeviceKey , char * Buffer , unsigned long Length , unsigned long * BytesRead ); 
fcns.name{fcnNum}='newp_usb_read_by_key'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_get_ascii ( long DeviceID , char * Buffer , unsigned long Length , unsigned long * BytesRead ); 
fcns.name{fcnNum}='newp_usb_get_ascii'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_write_by_key ( char * DeviceKey , char * Command , unsigned long Length ); 
fcns.name{fcnNum}='newp_usb_write_by_key'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_send_ascii ( long DeviceID , char * Command , unsigned long Length ); 
fcns.name{fcnNum}='newp_usb_send_ascii'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_write_binary_by_key ( char * DeviceKey , char * Command , unsigned long Length ); 
fcns.name{fcnNum}='newp_usb_write_binary_by_key'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% long EXTERN_C _stdcall newp_usb_send_binary ( long DeviceID , char * Command , unsigned long Length ); 
fcns.name{fcnNum}='newp_usb_send_binary'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong'};fcnNum=fcnNum+1;
methodinfo=fcns;