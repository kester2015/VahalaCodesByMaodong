function [methodinfo,structs,enuminfo,ThunkLibName]=wlmData
%WLMDATA Create structures to define interfaces found in 'wlmData'.

%This function was generated by loadlibrary.m parser version 1.1.6.34 on Sun May  3 17:35:23 2015
%perl options:'wlmData.i -outfile=wlmData.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
%  LONG_PTR _stdcall Instantiate ( long RFC , long Mode , LONG_PTR P1 , long P2 ) ; 
fcns.name{fcnNum}='Instantiate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall WaitForWLMEvent ( lref Mode , lref IntVal , dref DblVal ) ; 
fcns.name{fcnNum}='WaitForWLMEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'doublePtr'};fcnNum=fcnNum+1;
%  long _stdcall WaitForWLMEventEx ( lref Ver , lref Mode , lref IntVal , dref DblVal , lref Res1 ) ; 
fcns.name{fcnNum}='WaitForWLMEventEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
%  long _stdcall WaitForNextWLMEvent ( lref Mode , lref IntVal , dref DblVal ) ; 
fcns.name{fcnNum}='WaitForNextWLMEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'doublePtr'};fcnNum=fcnNum+1;
%  long _stdcall WaitForNextWLMEventEx ( lref Ver , lref Mode , lref IntVal , dref DblVal , lref Res1 ) ; 
fcns.name{fcnNum}='WaitForNextWLMEventEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
%  void _stdcall ClearWLMEvents ( void ) ; 
fcns.name{fcnNum}='ClearWLMEvents'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  long _stdcall ControlWLM ( long Action , LONG_PTR App , long Ver ) ; 
fcns.name{fcnNum}='ControlWLM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall ControlWLMEx ( long Action , LONG_PTR App , long Ver , long Delay , long Res ) ; 
fcns.name{fcnNum}='ControlWLMEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetMeasurementDelayMethod ( long Mode , long Delay ) ; 
fcns.name{fcnNum}='SetMeasurementDelayMethod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetWLMPriority ( long PPC , long Res1 , long Res2 ) ; 
fcns.name{fcnNum}='SetWLMPriority'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall PresetWLMIndex ( long Ver ) ; 
fcns.name{fcnNum}='PresetWLMIndex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetWLMVersion ( long Ver ) ; 
fcns.name{fcnNum}='GetWLMVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetWLMIndex ( long Ver ) ; 
fcns.name{fcnNum}='GetWLMIndex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetWLMCount ( long V ) ; 
fcns.name{fcnNum}='GetWLMCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  double _stdcall GetWavelength ( double WL ) ; 
fcns.name{fcnNum}='GetWavelength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetWavelength2 ( double WL2 ) ; 
fcns.name{fcnNum}='GetWavelength2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetWavelengthNum ( long num , double WL ) ; 
fcns.name{fcnNum}='GetWavelengthNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetCalWavelength ( long ba , double WL ) ; 
fcns.name{fcnNum}='GetCalWavelength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetCalibrationEffect ( double CE ) ; 
fcns.name{fcnNum}='GetCalibrationEffect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetFrequency ( double F ) ; 
fcns.name{fcnNum}='GetFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetFrequency2 ( double F2 ) ; 
fcns.name{fcnNum}='GetFrequency2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetFrequencyNum ( long num , double F ) ; 
fcns.name{fcnNum}='GetFrequencyNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetLinewidth ( long Index , double LW ) ; 
fcns.name{fcnNum}='GetLinewidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetLinewidthNum ( long num , double LW ) ; 
fcns.name{fcnNum}='GetLinewidthNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetDistance ( double D ) ; 
fcns.name{fcnNum}='GetDistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetAnalogIn ( double AI ) ; 
fcns.name{fcnNum}='GetAnalogIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetTemperature ( double T ) ; 
fcns.name{fcnNum}='GetTemperature'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  long _stdcall SetTemperature ( double T ) ; 
fcns.name{fcnNum}='SetTemperature'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetPressure ( double P ) ; 
fcns.name{fcnNum}='GetPressure'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  long _stdcall SetPressure ( long Mode , double P ) ; 
fcns.name{fcnNum}='SetPressure'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetExternalInput ( long Index , double I ) ; 
fcns.name{fcnNum}='GetExternalInput'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  long _stdcall SetExternalInput ( long Index , double I ) ; 
fcns.name{fcnNum}='SetExternalInput'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetExposure ( unsigned short E ) ; 
fcns.name{fcnNum}='GetExposure'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetExposure ( unsigned short E ) ; 
fcns.name{fcnNum}='SetExposure'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetExposure2 ( unsigned short E2 ) ; 
fcns.name{fcnNum}='GetExposure2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetExposure2 ( unsigned short E2 ) ; 
fcns.name{fcnNum}='SetExposure2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall GetExposureNum ( long num , long arr , long E ) ; 
fcns.name{fcnNum}='GetExposureNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetExposureNum ( long num , long arr , long E ) ; 
fcns.name{fcnNum}='SetExposureNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetExposureMode ( BOOL_H EM ) ; 
fcns.name{fcnNum}='GetExposureMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetExposureMode ( BOOL_H EM ) ; 
fcns.name{fcnNum}='SetExposureMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetExposureModeNum ( long num , BOOL_H EM ) ; 
fcns.name{fcnNum}='GetExposureModeNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetExposureModeNum ( long num , BOOL_H EM ) ; 
fcns.name{fcnNum}='SetExposureModeNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetExposureRange ( long ER ) ; 
fcns.name{fcnNum}='GetExposureRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetResultMode ( unsigned short RM ) ; 
fcns.name{fcnNum}='GetResultMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetResultMode ( unsigned short RM ) ; 
fcns.name{fcnNum}='SetResultMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetRange ( unsigned short R ) ; 
fcns.name{fcnNum}='GetRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetRange ( unsigned short R ) ; 
fcns.name{fcnNum}='SetRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetPulseMode ( unsigned short PM ) ; 
fcns.name{fcnNum}='GetPulseMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetPulseMode ( unsigned short PM ) ; 
fcns.name{fcnNum}='SetPulseMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetWideMode ( unsigned short WM ) ; 
fcns.name{fcnNum}='GetWideMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetWideMode ( unsigned short WM ) ; 
fcns.name{fcnNum}='SetWideMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall GetDisplayMode ( long DM ) ; 
fcns.name{fcnNum}='GetDisplayMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetDisplayMode ( long DM ) ; 
fcns.name{fcnNum}='SetDisplayMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetFastMode ( BOOL_H FM ) ; 
fcns.name{fcnNum}='GetFastMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetFastMode ( BOOL_H FM ) ; 
fcns.name{fcnNum}='SetFastMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  bool _stdcall GetLinewidthMode ( BOOL_H LM ) ; 
fcns.name{fcnNum}='GetLinewidthMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetLinewidthMode ( BOOL_H LM ) ; 
fcns.name{fcnNum}='SetLinewidthMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  bool _stdcall GetDistanceMode ( BOOL_H DM ) ; 
fcns.name{fcnNum}='GetDistanceMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetDistanceMode ( BOOL_H DM ) ; 
fcns.name{fcnNum}='SetDistanceMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetSwitcherMode ( long SM ) ; 
fcns.name{fcnNum}='GetSwitcherMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetSwitcherMode ( long SM ) ; 
fcns.name{fcnNum}='SetSwitcherMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetSwitcherChannel ( long CH ) ; 
fcns.name{fcnNum}='GetSwitcherChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetSwitcherChannel ( long CH ) ; 
fcns.name{fcnNum}='SetSwitcherChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetSwitcherSignalStates ( long Signal , lref Use , lref Show ) ; 
fcns.name{fcnNum}='GetSwitcherSignalStates'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  long _stdcall SetSwitcherSignalStates ( long Signal , long Use , long Show ) ; 
fcns.name{fcnNum}='SetSwitcherSignalStates'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetSwitcherSignal ( long Signal , long Use , long Show ) ; 
fcns.name{fcnNum}='SetSwitcherSignal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAutoCalMode ( long ACM ) ; 
fcns.name{fcnNum}='GetAutoCalMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetAutoCalMode ( long ACM ) ; 
fcns.name{fcnNum}='SetAutoCalMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAutoCalSetting ( long ACS , lref val , long Res1 , lref Res2 ) ; 
fcns.name{fcnNum}='GetAutoCalSetting'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'longPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
%  long _stdcall SetAutoCalSetting ( long ACS , long val , long Res1 , long Res2 ) ; 
fcns.name{fcnNum}='SetAutoCalSetting'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetActiveChannel ( long Mode , lref Port , long Res1 ) ; 
fcns.name{fcnNum}='GetActiveChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'longPtr', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetActiveChannel ( long Mode , long Port , long CH , long Res1 ) ; 
fcns.name{fcnNum}='SetActiveChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetChannelsCount ( long C ) ; 
fcns.name{fcnNum}='GetChannelsCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetOperationState ( unsigned short OS ) ; 
fcns.name{fcnNum}='GetOperationState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall Operation ( unsigned short Op ) ; 
fcns.name{fcnNum}='Operation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetOperationFile ( sref lpFile ) ; 
fcns.name{fcnNum}='SetOperationFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  long _stdcall Calibration ( long Type , long Unit , double Value , long Channel ) ; 
fcns.name{fcnNum}='Calibration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'double', 'long'};fcnNum=fcnNum+1;
%  long _stdcall RaiseMeasurementEvent ( long Mode ) ; 
fcns.name{fcnNum}='RaiseMeasurementEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall TriggerMeasurement ( long Action ) ; 
fcns.name{fcnNum}='TriggerMeasurement'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetTriggerState ( long TS ) ; 
fcns.name{fcnNum}='GetTriggerState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetInterval ( long I ) ; 
fcns.name{fcnNum}='GetInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetInterval ( long I ) ; 
fcns.name{fcnNum}='SetInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetIntervalMode ( BOOL_H IM ) ; 
fcns.name{fcnNum}='GetIntervalMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetIntervalMode ( BOOL_H IM ) ; 
fcns.name{fcnNum}='SetIntervalMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetBackground ( long BG ) ; 
fcns.name{fcnNum}='GetBackground'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetBackground ( long BG ) ; 
fcns.name{fcnNum}='SetBackground'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetLinkState ( BOOL_H LS ) ; 
fcns.name{fcnNum}='GetLinkState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetLinkState ( BOOL_H LS ) ; 
fcns.name{fcnNum}='SetLinkState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  void _stdcall LinkSettingsDlg ( void ) ; 
fcns.name{fcnNum}='LinkSettingsDlg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  long _stdcall GetPatternItemSize ( long Index ) ; 
fcns.name{fcnNum}='GetPatternItemSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetPatternItemCount ( long Index ) ; 
fcns.name{fcnNum}='GetPatternItemCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ULONG_PTR _stdcall GetPattern ( long Index ) ; 
fcns.name{fcnNum}='GetPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ULONG_PTR _stdcall GetPatternNum ( long Chn , long Index ) ; 
fcns.name{fcnNum}='GetPatternNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetPatternData ( long Index , ULONG_PTR PArray ) ; 
fcns.name{fcnNum}='GetPatternData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'ulong'};fcnNum=fcnNum+1;
%  long _stdcall GetPatternDataNum ( long Chn , long Index , ULONG_PTR PArray ) ; 
fcns.name{fcnNum}='GetPatternDataNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'ulong'};fcnNum=fcnNum+1;
%  long _stdcall SetPattern ( long Index , long iEnable ) ; 
fcns.name{fcnNum}='SetPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall SetPatternData ( long Index , ULONG_PTR PArray ) ; 
fcns.name{fcnNum}='SetPatternData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'ulong'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetAnalysisMode ( BOOL_H AM ) ; 
fcns.name{fcnNum}='GetAnalysisMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetAnalysisMode ( BOOL_H AM ) ; 
fcns.name{fcnNum}='SetAnalysisMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAnalysisItemSize ( long Index ) ; 
fcns.name{fcnNum}='GetAnalysisItemSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAnalysisItemCount ( long Index ) ; 
fcns.name{fcnNum}='GetAnalysisItemCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ULONG_PTR _stdcall GetAnalysis ( long Index ) ; 
fcns.name{fcnNum}='GetAnalysis'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAnalysisData ( long Index , ULONG_PTR PArray ) ; 
fcns.name{fcnNum}='GetAnalysisData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'ulong'};fcnNum=fcnNum+1;
%  long _stdcall SetAnalysis ( long Index , long iEnable ) ; 
fcns.name{fcnNum}='SetAnalysis'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  long _stdcall GetMinPeak ( long M1 ) ; 
fcns.name{fcnNum}='GetMinPeak'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetMinPeak2 ( long M2 ) ; 
fcns.name{fcnNum}='GetMinPeak2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetMaxPeak ( long X1 ) ; 
fcns.name{fcnNum}='GetMaxPeak'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetMaxPeak2 ( long X2 ) ; 
fcns.name{fcnNum}='GetMaxPeak2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAvgPeak ( long A1 ) ; 
fcns.name{fcnNum}='GetAvgPeak'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAvgPeak2 ( long A2 ) ; 
fcns.name{fcnNum}='GetAvgPeak2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetAvgPeak ( long PA ) ; 
fcns.name{fcnNum}='SetAvgPeak'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall GetAmplitudeNum ( long num , long Index , long A ) ; 
fcns.name{fcnNum}='GetAmplitudeNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
%  double _stdcall GetIntensityNum ( long num , double I ) ; 
fcns.name{fcnNum}='GetIntensityNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall GetPowerNum ( long num , double P ) ; 
fcns.name{fcnNum}='GetPowerNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetDelay ( unsigned short D ) ; 
fcns.name{fcnNum}='GetDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetDelay ( unsigned short D ) ; 
fcns.name{fcnNum}='SetDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetShift ( unsigned short S ) ; 
fcns.name{fcnNum}='GetShift'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetShift ( unsigned short S ) ; 
fcns.name{fcnNum}='SetShift'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetShift2 ( unsigned short S2 ) ; 
fcns.name{fcnNum}='GetShift2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetShift2 ( unsigned short S2 ) ; 
fcns.name{fcnNum}='SetShift2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetDeviationMode ( BOOL_H DM ) ; 
fcns.name{fcnNum}='GetDeviationMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetDeviationMode ( BOOL_H DM ) ; 
fcns.name{fcnNum}='SetDeviationMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  double _stdcall GetDeviationReference ( double DR ) ; 
fcns.name{fcnNum}='GetDeviationReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  long _stdcall SetDeviationReference ( double DR ) ; 
fcns.name{fcnNum}='SetDeviationReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  long _stdcall GetDeviationSensitivity ( long DS ) ; 
fcns.name{fcnNum}='GetDeviationSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetDeviationSensitivity ( long DS ) ; 
fcns.name{fcnNum}='SetDeviationSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  double _stdcall GetDeviationSignal ( double DS ) ; 
fcns.name{fcnNum}='GetDeviationSignal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  double _stdcall GetDeviationSignalNum ( long Port , double DS ) ; 
fcns.name{fcnNum}='GetDeviationSignalNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  long _stdcall SetDeviationSignal ( double DS ) ; 
fcns.name{fcnNum}='SetDeviationSignal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  long _stdcall SetDeviationSignalNum ( long Port , double DS ) ; 
fcns.name{fcnNum}='SetDeviationSignalNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  double _stdcall RaiseDeviationSignal ( long iType , double dSignal ) ; 
fcns.name{fcnNum}='RaiseDeviationSignal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'long', 'double'};fcnNum=fcnNum+1;
%  long _stdcall GetPIDCourse ( sref PIDC ) ; 
fcns.name{fcnNum}='GetPIDCourse'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  long _stdcall SetPIDCourse ( sref PIDC ) ; 
fcns.name{fcnNum}='SetPIDCourse'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  long _stdcall GetPIDCourseNum ( long Port , sref PIDC ) ; 
fcns.name{fcnNum}='GetPIDCourseNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
%  long _stdcall SetPIDCourseNum ( long Port , sref PIDC ) ; 
fcns.name{fcnNum}='SetPIDCourseNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
%  long _stdcall GetPIDSetting ( long PS , long Port , lref iSet , dref dSet ) ; 
fcns.name{fcnNum}='GetPIDSetting'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'longPtr', 'doublePtr'};fcnNum=fcnNum+1;
%  long _stdcall SetPIDSetting ( long PS , long Port , long iSet , double dSet ) ; 
fcns.name{fcnNum}='SetPIDSetting'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
%  long _stdcall ClearPIDHistory ( long Port ) ; 
fcns.name{fcnNum}='ClearPIDHistory'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  double _stdcall ConvertUnit ( double Val , long uFrom , long uTo ) ; 
fcns.name{fcnNum}='ConvertUnit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'long', 'long'};fcnNum=fcnNum+1;
%  double _stdcall ConvertDeltaUnit ( double Base , double Delta , long uBase , long uFrom , long uTo ) ; 
fcns.name{fcnNum}='ConvertDeltaUnit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'double', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  BOOL_H _stdcall GetReduced ( BOOL_H R ) ; 
fcns.name{fcnNum}='GetReduced'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  long _stdcall SetReduced ( BOOL_H R ) ; 
fcns.name{fcnNum}='SetReduced'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned short _stdcall GetScale ( unsigned short S ) ; 
fcns.name{fcnNum}='GetScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
%  long _stdcall SetScale ( unsigned short S ) ; 
fcns.name{fcnNum}='SetScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
methodinfo=fcns;